# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2017-01-04 07:48
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='HmsUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(help_text='Required. 30 characters or fewer. Letters, numbers and @/./+/-/_ characters', max_length=30, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[\\w.@+-]+$'), 'Enter a valid username.', 'invalid')], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'db_table': 'auth_user',
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField(verbose_name='when')),
                ('note', models.TextField()),
                ('status', models.CharField(choices=[('O', 'Open'), ('R', 'Reopen'), ('D', 'Done'), ('H', 'Hold'), ('C', 'Cancel')], max_length=1)),
            ],
            options={
                'ordering': ['-when'],
            },
        ),
        migrations.CreateModel(
            name='Admission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admitted', models.DateTimeField(verbose_name='Admittied On')),
                ('released', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule', models.DateTimeField(verbose_name='When')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('note', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Bed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_id', models.CharField(max_length=16)),
            ],
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Negotiation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('F', 'Fixed'), ('C', 'Canceled'), ('W', 'Waiting for Approval')], default='W', max_length=1)),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('note', models.TextField(blank=True, null=True)),
                ('when', models.DateTimeField(blank=True, null=True, verbose_name='When')),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='negotiations', to='identity.Appointment')),
            ],
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField(verbose_name='when')),
                ('subject', models.CharField(max_length=1500)),
                ('body', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField(verbose_name='When')),
                ('subject', models.CharField(max_length=1500)),
                ('body', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='AdmissionVisit',
            fields=[
                ('story_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='identity.Story')),
            ],
            bases=('identity.story',),
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('hmsuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('dob', models.DateField(verbose_name='Date Of Birth')),
                ('sex', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('address', models.CharField(blank=True, max_length=300)),
                ('paramedic', models.BooleanField()),
            ],
            options={
                'abstract': False,
            },
            bases=('identity.hmsuser',),
        ),
        migrations.CreateModel(
            name='EmergencyAdmission',
            fields=[
                ('admission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='identity.Admission')),
            ],
            bases=('identity.admission',),
        ),
        migrations.CreateModel(
            name='Operator',
            fields=[
                ('hmsuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('dob', models.DateField(verbose_name='Date Of Birth')),
                ('sex', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('address', models.CharField(blank=True, max_length=300)),
            ],
            options={
                'abstract': False,
            },
            bases=('identity.hmsuser',),
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('hmsuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('name', models.CharField(blank=True, max_length=30, verbose_name='Name')),
                ('lat', models.IntegerField()),
                ('lng', models.IntegerField()),
                ('website', models.CharField(max_length=64)),
                ('address', models.CharField(blank=True, max_length=300)),
                ('doctors', models.ManyToManyField(blank=True, through='identity.Membership', to='identity.Doctor')),
            ],
            options={
                'abstract': False,
            },
            bases=('identity.hmsuser',),
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('hmsuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('dob', models.DateField(verbose_name='Date Of Birth')),
                ('sex', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('address', models.CharField(blank=True, max_length=300)),
            ],
            options={
                'abstract': False,
            },
            bases=('identity.hmsuser',),
        ),
        migrations.CreateModel(
            name='RandomVisit',
            fields=[
                ('story_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='identity.Story')),
            ],
            bases=('identity.story',),
        ),
        migrations.CreateModel(
            name='RegularAdmission',
            fields=[
                ('admission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='identity.Admission')),
            ],
            bases=('identity.admission',),
        ),
        migrations.CreateModel(
            name='ScheduledVisit',
            fields=[
                ('story_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='identity.Story')),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_visit', to='identity.Appointment')),
            ],
            bases=('identity.story',),
        ),
        migrations.AddField(
            model_name='task',
            name='admission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='identity.Admission'),
        ),
        migrations.AddField(
            model_name='task',
            name='who',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='story',
            name='refers_to',
            field=models.ManyToManyField(blank=True, related_name='refered_by', to='identity.Story'),
        ),
        migrations.AddField(
            model_name='negotiation',
            name='who',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='negotiations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='activity',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='identity.Task'),
        ),
        migrations.AddField(
            model_name='activity',
            name='who',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='hmsuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='hmsuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='story',
            name='doctor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stories', to='identity.Doctor'),
        ),
        migrations.AddField(
            model_name='story',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stories', to='identity.Patient'),
        ),
        migrations.AddField(
            model_name='regularadmission',
            name='story',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admissions', to='identity.Story'),
        ),
        migrations.AddField(
            model_name='operator',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operators', to='identity.Organization'),
        ),
        migrations.AddField(
            model_name='membership',
            name='doctor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='identity.Doctor'),
        ),
        migrations.AddField(
            model_name='membership',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='identity.Organization'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='organizations',
            field=models.ManyToManyField(blank=True, through='identity.Membership', to='identity.Organization'),
        ),
        migrations.AddField(
            model_name='bed',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='beds', to='identity.Organization'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='doctor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='identity.Doctor'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='org',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='identity.Organization'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='identity.Patient'),
        ),
        migrations.AddField(
            model_name='admissionvisit',
            name='admission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admission_visit', to='identity.Admission'),
        ),
        migrations.AddField(
            model_name='admission',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admissions', to='identity.Organization'),
        ),
        migrations.AddField(
            model_name='admission',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admissions', to='identity.Patient'),
        ),
        migrations.AlterUniqueTogether(
            name='membership',
            unique_together=set([('doctor', 'org')]),
        ),
    ]
